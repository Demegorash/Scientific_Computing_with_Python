Learn Lambda Functions by Building an Expense Tracker

Thank you for the class to https://www.freecodecamp.org

Here is the link for the Project:  https://www.freecodecamp.org/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-1

I will load this with my code to GitHub as well.  I am learning about how to code, I am not an expert, however I am doing this as a guide for the future.

Hope you enjoy it!

Lambda functions give you a concise way to write small, throwaway functions in your code.

In this project, you'll explore the power of Lambda Functions by creating an expense tracker. Your resulting app will demonstrate how you can use Lambda Functions for efficient, streamlined operations.

*******************************************************************************************************************************************************************************

Step 1
Before starting with the project, you are going to learn about lists.

Unlike numbers and strings, a list is a data type that works as a container for other values:

Example Code:
example_list = [1, 2, 3, 4]
empty_list = []

The list is characterized by the square brackets around all the values, and a comma between the values, like: ["A", "happy", "list"]. If the list does not contain any values, then it is an empty list: [].

A list can contain different data types: [1, "Up", ["Down", "Twice"]]. That includes all possible data types. It can also contain another list!

Create a variable called my_list and assign to it an empty list.

*******************************************************************************************************************************************************************************

Step 2
To add items to a list, you can write them between the square brackets, separating the values with commas.

Add the numbers 1 and 2 inside the list.

*******************************************************************************************************************************************************************************

Step 3
Python has a handful of list methods. Such as methods for adding or removing list items.

You can add an item to the end of a list using the append() method. For example:

Example Code:
example_list = [4, 5, 6]

example_list.append(7)

example_list now is [4, 5, 6, 7].

Try to use the append() method to add 3 to my_list. Then print the list.

*******************************************************************************************************************************************************************************

Step 4
You can also access a single element to get its value.

Lists are zero-indexed like strings are. That means that the first element is at index 0, the second element is at index 1 and so on.

To access an element you use bracket notation. For example, example_list[1] is accessing the element at index 1, the second element, of example_list.

Print the first element of my_list.

*******************************************************************************************************************************************************************************

Step 5
Python lists are mutable which means that the value of the list items can be changed. You can change the value of an element using the bracket notation.

Example Code:
example_list = [4, 5, 6, 7]
example_list[1] = 'oh'

This will make example_list have value of [4, 'oh', 6, 7].

Change the first element of my_list to 0, then print the list to check the value.

*******************************************************************************************************************************************************************************

Step 6
The insert method can add an element at any position in a list. The first argument is the position at which the element has to be added, and the second argument is the element to add. For example, here's how to add a new element in the third position of example_list:

Example Code:
example_list = [4, 5, 6, 7]

example_list.insert(2, 5.5)

print(example_list) # [4, 5, 5.5, 6, 7]

Using insert(), add 1 to my_list in the proper position so that it is counting upward, then print the list.

*******************************************************************************************************************************************************************************

Step 7
The pop() method can be used to remove an element from a list. By default, it removes the last element of the list. You can pass an index as the argument to the method, and it will remove the element at the given index.

Example Code:
fruits_list = ["cherry", "lemon", "tomato", "apple", "orange"]

fruits_list.pop(2)

print(fruits_list) # ["cherry", "lemon", "apple", "orange"]

In this case, fruits_list.pop(2) removes the element at index 2 of the list.

Use pop() to remove the last element from my_list, then print my_list.

*******************************************************************************************************************************************************************************

Step 8
Now that you have explored lists, remove all of the code you wrote for your review so you can begin the project.

*******************************************************************************************************************************************************************************

Step 9
In this project, you're going to build a simple, yet functional expense tracker in Python.

Start by defining a function named add_expense that takes three parameters: expenses, amount and category. Use the pass keyword to fill the function body.

*******************************************************************************************************************************************************************************

Step 10
Create an empty list named expenses. You will use it to store each of your expenses.

*******************************************************************************************************************************************************************************

Step 11
The expenses parameter of your add_expense function will be a list of expenses. You want to be able to add items at the end of your list. For that you'll use the .append() list method.

Add a call to the .append() method on the expenses list. Don't pass any arguments to .append() for now.

*******************************************************************************************************************************************************************************

Step 12
A dictionary is another built-in data type in Python. A dictionary is a collection of data in the form of key-value pairs. Dictionaries are defined with curly braces ({}) and they contain key-value pairs separated by commas. Each key is followed by a colon (:) and the value:

Example Code:
{'amount': 50.0, 'category': 'Food'}

In the example above, 'amount' and 'category' are keys, and 50.0 and 'Food' are their corresponding values.

Create a dictionary with a key 'amount' and value of the amount parameter and pass your new dictionary to the .append() call.

*******************************************************************************************************************************************************************************

Step 13
Add another key-value pair to the dictionary you are appending to the expense list. Use the string 'category' as the key, and the category parameter as the value.

*******************************************************************************************************************************************************************************

Step 14
Next, define a function named print_expenses that takes one parameter expenses. This function will later be used to display each expense in your list.

Fill the body of your new function with a pass statement.

*******************************************************************************************************************************************************************************

Step 15
Inside the print_expenses function, create a for loop that iterates over each item in the expenses list. Use expense as the loop variable and move pass inside the loop body.

*******************************************************************************************************************************************************************************

Step 16
Next, you are going to display the details for each expense.

Inside the for loop, replace pass with a print() call and pass it the following f-string: f'Amount: {expense}, Category: {expense}'.

*******************************************************************************************************************************************************************************

Step 17
In Python, an important thing to know is that the same type of quote used to define a string cannot be used inside it. For example, the string 'I'm a string!' is not valid. To use the single quote inside that string you should either:

Escape the quote by prepending a backlash to it: 'I\'m a string!'
Or use double quotes to define the string: "I'm a string!" (preferred).
You can access values in a dictionary through its keys. You need to use bracket notation and include the key between the square brackets:

Example Code:
my_dict = {'amount': 50.0, 'category': 'Food'}
my_dict['amount'] # 50.0

You are currently interpolating the expense dictionary in your f-string. Modify the f-string expression to access the value of the 'amount' key and the 'category' key in the expense dictionary.

*******************************************************************************************************************************************************************************

Step 18
You will need a function to calculate the total amount of expenses.

Define a function named total_expenses that takes one parameter expenses. Fill the function body with a pass statement for now.

*******************************************************************************************************************************************************************************

Step 19
Lambda functions are brief, anonymous functions in Python, ideal for simple, one-time tasks. They are defined by the lambda keyword, and they use the following syntax:

Example Code:
lambda x: expr

In the example above, x represents a parameter to be used in the expression expr, and it acts just like any parameter in a traditional function. expr is the expression that gets evaluated and returned when the lambda function is called.

Create a variable named test and assign it a lambda function that takes an x parameter and returns x * 2.

*******************************************************************************************************************************************************************************

Step 20
To call a lambda function you can use the usual function syntax with a pair of parentheses after the variable name.

Call your test lambda function and pass 3 as the argument. Then, print the result.

*******************************************************************************************************************************************************************************

Step 21
Lambda functions can be valuably combined with the map() function, which executes a specified function for each element in a collection of objects, such as a list:

Example Code:
map(lambda x: x * 2, [1, 2, 3])

The function to execute is passed as the first argument, and the iterable is passed as the second argument.

The result of the example above would be [2, 4, 6], where each item in the list passed to map() has been doubled by the action of the lambda function.

Modify your print() call to print the result of calling map() with test as the first argument, and [2, 3, 5, 8] as the second argument. You won't be able to see a readable output yet.

*******************************************************************************************************************************************************************************

Step 22
You should see something like <map object at 0xd273a8> printed on the console, which is the string representation of the map object returned by map().

To obtain a readable output you need to turn the map object into a list. Do it by passing the map() call as the argument to the list() function.

*******************************************************************************************************************************************************************************

Step 23
The sum() function returns the sum of the items in the iterable which is passed as its argument. You are going to use sum() together with map() and lambda functions to get the total amount of expenses.

For now, make a little test and modify your current print() call replacing the list() call with a call to the sum() function passing it the current map() call as the argument.

*******************************************************************************************************************************************************************************

Step 24
Next, you are going to implement the same logic within the total_expenses function.

For now, delete both the test function and the print() call.

*******************************************************************************************************************************************************************************

Step 25
In the total_expenses function, you'll now integrate a lambda function. Replace pass with a lambda function that has expense as its parameter.

expense is expected to be a dictionary, and your lambda function should return the value of the 'amount' key in the expense dictionary.

*******************************************************************************************************************************************************************************